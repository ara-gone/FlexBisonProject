Terminals unused in grammar

    VALID
    BOOL_OP
    EQU
    "lexp"


Grammar

    0 $accept: prog $end

    1 prog: proc progm
    2     | struct progm

    3 progm: %empty
    4      | proc progm
    5      | struct progm

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' stmt '}'

    7 struct: STRUCT ID '{' oneOrMoreDeclarations '}'

    8 zeroOrMoreDeclarations: %empty
    9                       | declaration
   10                       | declaration ',' zeroOrMoreDeclarations

   11 oneOrMoreDeclarations: declaration
   12                      | declaration ',' oneOrMoreDeclarations

   13 declaration: type ID

   14 stmt: %empty
   15     | FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}' stmt
   16     | IF '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt '}'
   17     | PRINTF '(' STRINGLITERAL ')' ';' stmt
   18     | RETURN expr ';' stmt
   19     | '{' stmt-seq '}' stmt
   20     | type ID ';' stmt
   21     | ID '=' expr ';' stmt
   22     | ID '.' lexp '=' expr ';' stmt
   23     | ID '(' exprs ')' ';' stmt
   24     | ID '=' ID '(' exprs ')' ';' stmt

   25 exprs: %empty
   26      | expr "," exprs

   27 stmt-seq: %empty
   28         | stmt ',' stmt-seq

   29 type: TYPE
   30     | ID

   31 return-type: TYPE
   32            | VOID

   33 expr: addsub
   34     | '-' expr
   35     | '!' expr

   36 addsub: factor
   37       | expr '+' expr
   38       | expr '-' expr

   39 factor: equality
   40       | expr '*' expr
   41       | expr '/' expr

   42 equality: term
   43         | expr OR expr
   44         | expr MOD expr
   45         | expr AND expr

   46 term: NUMBER
   47     | STRINGLITERAL
   48     | TRUE
   49     | FALSE
   50     | lexp
   51     | '(' expr ')'

   52 lexp: ID
   53     | ID '.' lexp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 35
    '(' (40) 6 15 16 17 23 24 51
    ')' (41) 6 15 16 17 23 24 51
    '*' (42) 40
    '+' (43) 37
    ',' (44) 10 12 28
    '-' (45) 34 38
    '.' (46) 22 53
    '/' (47) 41
    ';' (59) 15 17 18 20 21 22 23 24
    '=' (61) 15 21 22 24
    '{' (123) 6 7 15 16 19
    '}' (125) 6 7 15 16 19
    error (256)
    NUMBER (258) 46
    VALID (259)
    ID (260) 6 7 13 15 20 21 22 23 24 30 52 53
    STRINGLITERAL (261) 17 47
    FOR (262) 15
    RETURN (263) 18
    TYPE (264) 29 31
    BOOL_OP (265)
    STRUCT (266) 7
    VOID (267) 32
    PRINTF (268) 17
    EQU (269)
    MOD (270) 44
    AND (271) 45
    OR (272) 43
    IF (273) 16
    THEN (274) 16
    ELSE (275) 16
    TRUE (276) 48
    FALSE (277) 49
    "lexp" (278)
    "," (279) 26


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    prog (39)
        on left: 1 2
        on right: 0
    progm (40)
        on left: 3 4 5
        on right: 1 2 4 5
    proc (41)
        on left: 6
        on right: 1 4
    struct (42)
        on left: 7
        on right: 2 5
    zeroOrMoreDeclarations (43)
        on left: 8 9 10
        on right: 6 10
    oneOrMoreDeclarations (44)
        on left: 11 12
        on right: 7 12
    declaration (45)
        on left: 13
        on right: 9 10 11 12
    stmt (46)
        on left: 14 15 16 17 18 19 20 21 22 23 24
        on right: 6 15 16 17 18 19 20 21 22 23 24 28
    exprs (47)
        on left: 25 26
        on right: 23 24 26
    stmt-seq (48)
        on left: 27 28
        on right: 19 28
    type (49)
        on left: 29 30
        on right: 13 20
    return-type (50)
        on left: 31 32
        on right: 6
    expr (51)
        on left: 33 34 35
        on right: 15 16 18 21 22 26 34 35 37 38 40 41 43 44 45 51
    addsub (52)
        on left: 36 37 38
        on right: 33
    factor (53)
        on left: 39 40 41
        on right: 36
    equality (54)
        on left: 42 43 44 45
        on right: 39
    term (55)
        on left: 46 47 48 49 50 51
        on right: 42
    lexp (56)
        on left: 52 53
        on right: 22 50 53


State 0

    0 $accept: . prog $end

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    prog         go to state 4
    proc         go to state 5
    struct       go to state 6
    return-type  go to state 7


State 1

   31 return-type: TYPE .

    $default  reduce using rule 31 (return-type)


State 2

    7 struct: STRUCT . ID '{' oneOrMoreDeclarations '}'

    ID  shift, and go to state 8


State 3

   32 return-type: VOID .

    $default  reduce using rule 32 (return-type)


State 4

    0 $accept: prog . $end

    $end  shift, and go to state 9


State 5

    1 prog: proc . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 10
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 6

    2 prog: struct . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 13
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 7

    6 proc: return-type . ID '(' zeroOrMoreDeclarations ')' '{' stmt '}'

    ID  shift, and go to state 14


State 8

    7 struct: STRUCT ID . '{' oneOrMoreDeclarations '}'

    '{'  shift, and go to state 15


State 9

    0 $accept: prog $end .

    $default  accept


State 10

    1 prog: proc progm .

    $default  reduce using rule 1 (prog)


State 11

    4 progm: proc . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 16
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 12

    5 progm: struct . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 17
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 13

    2 prog: struct progm .

    $default  reduce using rule 2 (prog)


State 14

    6 proc: return-type ID . '(' zeroOrMoreDeclarations ')' '{' stmt '}'

    '('  shift, and go to state 18


State 15

    7 struct: STRUCT ID '{' . oneOrMoreDeclarations '}'

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    oneOrMoreDeclarations  go to state 21
    declaration            go to state 22
    type                   go to state 23


State 16

    4 progm: proc progm .

    $default  reduce using rule 4 (progm)


State 17

    5 progm: struct progm .

    $default  reduce using rule 5 (progm)


State 18

    6 proc: return-type ID '(' . zeroOrMoreDeclarations ')' '{' stmt '}'

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 8 (zeroOrMoreDeclarations)

    zeroOrMoreDeclarations  go to state 24
    declaration             go to state 25
    type                    go to state 23


State 19

   30 type: ID .

    $default  reduce using rule 30 (type)


State 20

   29 type: TYPE .

    $default  reduce using rule 29 (type)


State 21

    7 struct: STRUCT ID '{' oneOrMoreDeclarations . '}'

    '}'  shift, and go to state 26


State 22

   11 oneOrMoreDeclarations: declaration .
   12                      | declaration . ',' oneOrMoreDeclarations

    ','  shift, and go to state 27

    $default  reduce using rule 11 (oneOrMoreDeclarations)


State 23

   13 declaration: type . ID

    ID  shift, and go to state 28


State 24

    6 proc: return-type ID '(' zeroOrMoreDeclarations . ')' '{' stmt '}'

    ')'  shift, and go to state 29


State 25

    9 zeroOrMoreDeclarations: declaration .
   10                       | declaration . ',' zeroOrMoreDeclarations

    ','  shift, and go to state 30

    $default  reduce using rule 9 (zeroOrMoreDeclarations)


State 26

    7 struct: STRUCT ID '{' oneOrMoreDeclarations '}' .

    $default  reduce using rule 7 (struct)


State 27

   12 oneOrMoreDeclarations: declaration ',' . oneOrMoreDeclarations

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    oneOrMoreDeclarations  go to state 31
    declaration            go to state 22
    type                   go to state 23


State 28

   13 declaration: type ID .

    $default  reduce using rule 13 (declaration)


State 29

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' . '{' stmt '}'

    '{'  shift, and go to state 32


State 30

   10 zeroOrMoreDeclarations: declaration ',' . zeroOrMoreDeclarations

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 8 (zeroOrMoreDeclarations)

    zeroOrMoreDeclarations  go to state 33
    declaration             go to state 25
    type                    go to state 23


State 31

   12 oneOrMoreDeclarations: declaration ',' oneOrMoreDeclarations .

    $default  reduce using rule 12 (oneOrMoreDeclarations)


State 32

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' . stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 40
    type  go to state 41


State 33

   10 zeroOrMoreDeclarations: declaration ',' zeroOrMoreDeclarations .

    $default  reduce using rule 10 (zeroOrMoreDeclarations)


State 34

   21 stmt: ID . '=' expr ';' stmt
   22     | ID . '.' lexp '=' expr ';' stmt
   23     | ID . '(' exprs ')' ';' stmt
   24     | ID . '=' ID '(' exprs ')' ';' stmt
   30 type: ID .

    '='  shift, and go to state 42
    '.'  shift, and go to state 43
    '('  shift, and go to state 44

    $default  reduce using rule 30 (type)


State 35

   15 stmt: FOR . '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}' stmt

    '('  shift, and go to state 45


State 36

   18 stmt: RETURN . expr ';' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 54
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 37

   17 stmt: PRINTF . '(' STRINGLITERAL ')' ';' stmt

    '('  shift, and go to state 60


State 38

   16 stmt: IF . '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt '}'

    '('  shift, and go to state 61


State 39

   19 stmt: '{' . stmt-seq '}' stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    '}'       reduce using rule 27 (stmt-seq)
    $default  reduce using rule 14 (stmt)

    stmt      go to state 62
    stmt-seq  go to state 63
    type      go to state 41


State 40

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' stmt . '}'

    '}'  shift, and go to state 64


State 41

   20 stmt: type . ID ';' stmt

    ID  shift, and go to state 65


State 42

   21 stmt: ID '=' . expr ';' stmt
   24     | ID '=' . ID '(' exprs ')' ';' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 66
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 67
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 43

   22 stmt: ID '.' . lexp '=' expr ';' stmt

    ID  shift, and go to state 47

    lexp  go to state 68


State 44

   23 stmt: ID '(' . exprs ')' ';' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    $default  reduce using rule 25 (exprs)

    exprs     go to state 69
    expr      go to state 70
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 45

   15 stmt: FOR '(' . ID '=' expr ';' expr ';' stmt ')' '{' stmt '}' stmt

    ID  shift, and go to state 71


State 46

   46 term: NUMBER .

    $default  reduce using rule 46 (term)


State 47

   52 lexp: ID .
   53     | ID . '.' lexp

    '.'  shift, and go to state 72

    $default  reduce using rule 52 (lexp)


State 48

   47 term: STRINGLITERAL .

    $default  reduce using rule 47 (term)


State 49

   48 term: TRUE .

    $default  reduce using rule 48 (term)


State 50

   49 term: FALSE .

    $default  reduce using rule 49 (term)


State 51

   35 expr: '!' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 73
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 52

   34 expr: '-' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 74
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 53

   51 term: '(' . expr ')'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 75
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 54

   18 stmt: RETURN expr . ';' stmt
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 83


State 55

   33 expr: addsub .

    $default  reduce using rule 33 (expr)


State 56

   36 addsub: factor .

    $default  reduce using rule 36 (addsub)


State 57

   39 factor: equality .

    $default  reduce using rule 39 (factor)


State 58

   42 equality: term .

    $default  reduce using rule 42 (equality)


State 59

   50 term: lexp .

    $default  reduce using rule 50 (term)


State 60

   17 stmt: PRINTF '(' . STRINGLITERAL ')' ';' stmt

    STRINGLITERAL  shift, and go to state 84


State 61

   16 stmt: IF '(' . expr ')' THEN '{' stmt '}' ELSE '{' stmt '}'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 85
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 62

   28 stmt-seq: stmt . ',' stmt-seq

    ','  shift, and go to state 86


State 63

   19 stmt: '{' stmt-seq . '}' stmt

    '}'  shift, and go to state 87


State 64

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' stmt '}' .

    $default  reduce using rule 6 (proc)


State 65

   20 stmt: type ID . ';' stmt

    ';'  shift, and go to state 88


State 66

   24 stmt: ID '=' ID . '(' exprs ')' ';' stmt
   52 lexp: ID .
   53     | ID . '.' lexp

    '.'  shift, and go to state 72
    '('  shift, and go to state 89

    $default  reduce using rule 52 (lexp)


State 67

   21 stmt: ID '=' expr . ';' stmt
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 90


State 68

   22 stmt: ID '.' lexp . '=' expr ';' stmt

    '='  shift, and go to state 91


State 69

   23 stmt: ID '(' exprs . ')' ';' stmt

    ')'  shift, and go to state 92


State 70

   26 exprs: expr . "," exprs
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ","  shift, and go to state 93


State 71

   15 stmt: FOR '(' ID . '=' expr ';' expr ';' stmt ')' '{' stmt '}' stmt

    '='  shift, and go to state 94


State 72

   53 lexp: ID '.' . lexp

    ID  shift, and go to state 47

    lexp  go to state 95


State 73

   35 expr: '!' expr .
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 35 (expr)


State 74

   34 expr: '-' expr .
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 34 (expr)


State 75

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr
   51 term: '(' expr . ')'

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ')'  shift, and go to state 96


State 76

   44 equality: expr MOD . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 97
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 77

   45 equality: expr AND . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 98
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 78

   43 equality: expr OR . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 99
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 79

   37 addsub: expr '+' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 100
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 80

   38 addsub: expr '-' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 101
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 81

   40 factor: expr '*' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 102
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 82

   41 factor: expr '/' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 103
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 83

   18 stmt: RETURN expr ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 104
    type  go to state 41


State 84

   17 stmt: PRINTF '(' STRINGLITERAL . ')' ';' stmt

    ')'  shift, and go to state 105


State 85

   16 stmt: IF '(' expr . ')' THEN '{' stmt '}' ELSE '{' stmt '}'
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ')'  shift, and go to state 106


State 86

   28 stmt-seq: stmt ',' . stmt-seq

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    '}'       reduce using rule 27 (stmt-seq)
    $default  reduce using rule 14 (stmt)

    stmt      go to state 62
    stmt-seq  go to state 107
    type      go to state 41


State 87

   19 stmt: '{' stmt-seq '}' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 108
    type  go to state 41


State 88

   20 stmt: type ID ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 109
    type  go to state 41


State 89

   24 stmt: ID '=' ID '(' . exprs ')' ';' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    $default  reduce using rule 25 (exprs)

    exprs     go to state 110
    expr      go to state 70
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 90

   21 stmt: ID '=' expr ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 111
    type  go to state 41


State 91

   22 stmt: ID '.' lexp '=' . expr ';' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 112
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 92

   23 stmt: ID '(' exprs ')' . ';' stmt

    ';'  shift, and go to state 113


State 93

   26 exprs: expr "," . exprs

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    $default  reduce using rule 25 (exprs)

    exprs     go to state 114
    expr      go to state 70
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 94

   15 stmt: FOR '(' ID '=' . expr ';' expr ';' stmt ')' '{' stmt '}' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 115
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 95

   53 lexp: ID '.' lexp .

    $default  reduce using rule 53 (lexp)


State 96

   51 term: '(' expr ')' .

    $default  reduce using rule 51 (term)


State 97

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   44         | expr MOD expr .
   45         | expr . AND expr

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 44 (equality)


State 98

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr
   45         | expr AND expr .

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 45 (equality)


State 99

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   43         | expr OR expr .
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 43 (equality)


State 100

   37 addsub: expr . '+' expr
   37       | expr '+' expr .
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 37 (addsub)


State 101

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   38       | expr '-' expr .
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 38 (addsub)


State 102

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   40       | expr '*' expr .
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78

    $default  reduce using rule 40 (factor)


State 103

   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   41       | expr '/' expr .
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78

    $default  reduce using rule 41 (factor)


State 104

   18 stmt: RETURN expr ';' stmt .

    $default  reduce using rule 18 (stmt)


State 105

   17 stmt: PRINTF '(' STRINGLITERAL ')' . ';' stmt

    ';'  shift, and go to state 116


State 106

   16 stmt: IF '(' expr ')' . THEN '{' stmt '}' ELSE '{' stmt '}'

    THEN  shift, and go to state 117


State 107

   28 stmt-seq: stmt ',' stmt-seq .

    $default  reduce using rule 28 (stmt-seq)


State 108

   19 stmt: '{' stmt-seq '}' stmt .

    $default  reduce using rule 19 (stmt)


State 109

   20 stmt: type ID ';' stmt .

    $default  reduce using rule 20 (stmt)


State 110

   24 stmt: ID '=' ID '(' exprs . ')' ';' stmt

    ')'  shift, and go to state 118


State 111

   21 stmt: ID '=' expr ';' stmt .

    $default  reduce using rule 21 (stmt)


State 112

   22 stmt: ID '.' lexp '=' expr . ';' stmt
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 119


State 113

   23 stmt: ID '(' exprs ')' ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 120
    type  go to state 41


State 114

   26 exprs: expr "," exprs .

    $default  reduce using rule 26 (exprs)


State 115

   15 stmt: FOR '(' ID '=' expr . ';' expr ';' stmt ')' '{' stmt '}' stmt
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 121


State 116

   17 stmt: PRINTF '(' STRINGLITERAL ')' ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 122
    type  go to state 41


State 117

   16 stmt: IF '(' expr ')' THEN . '{' stmt '}' ELSE '{' stmt '}'

    '{'  shift, and go to state 123


State 118

   24 stmt: ID '=' ID '(' exprs ')' . ';' stmt

    ';'  shift, and go to state 124


State 119

   22 stmt: ID '.' lexp '=' expr ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 125
    type  go to state 41


State 120

   23 stmt: ID '(' exprs ')' ';' stmt .

    $default  reduce using rule 23 (stmt)


State 121

   15 stmt: FOR '(' ID '=' expr ';' . expr ';' stmt ')' '{' stmt '}' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 126
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 122

   17 stmt: PRINTF '(' STRINGLITERAL ')' ';' stmt .

    $default  reduce using rule 17 (stmt)


State 123

   16 stmt: IF '(' expr ')' THEN '{' . stmt '}' ELSE '{' stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 127
    type  go to state 41


State 124

   24 stmt: ID '=' ID '(' exprs ')' ';' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 128
    type  go to state 41


State 125

   22 stmt: ID '.' lexp '=' expr ';' stmt .

    $default  reduce using rule 22 (stmt)


State 126

   15 stmt: FOR '(' ID '=' expr ';' expr . ';' stmt ')' '{' stmt '}' stmt
   37 addsub: expr . '+' expr
   38       | expr . '-' expr
   40 factor: expr . '*' expr
   41       | expr . '/' expr
   43 equality: expr . OR expr
   44         | expr . MOD expr
   45         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 129


State 127

   16 stmt: IF '(' expr ')' THEN '{' stmt . '}' ELSE '{' stmt '}'

    '}'  shift, and go to state 130


State 128

   24 stmt: ID '=' ID '(' exprs ')' ';' stmt .

    $default  reduce using rule 24 (stmt)


State 129

   15 stmt: FOR '(' ID '=' expr ';' expr ';' . stmt ')' '{' stmt '}' stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 131
    type  go to state 41


State 130

   16 stmt: IF '(' expr ')' THEN '{' stmt '}' . ELSE '{' stmt '}'

    ELSE  shift, and go to state 132


State 131

   15 stmt: FOR '(' ID '=' expr ';' expr ';' stmt . ')' '{' stmt '}' stmt

    ')'  shift, and go to state 133


State 132

   16 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE . '{' stmt '}'

    '{'  shift, and go to state 134


State 133

   15 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' . '{' stmt '}' stmt

    '{'  shift, and go to state 135


State 134

   16 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE '{' . stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 136
    type  go to state 41


State 135

   15 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' . stmt '}' stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 137
    type  go to state 41


State 136

   16 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt . '}'

    '}'  shift, and go to state 138


State 137

   15 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt . '}' stmt

    '}'  shift, and go to state 139


State 138

   16 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt '}' .

    $default  reduce using rule 16 (stmt)


State 139

   15 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 14 (stmt)

    stmt  go to state 140
    type  go to state 41


State 140

   15 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}' stmt .

    $default  reduce using rule 15 (stmt)
