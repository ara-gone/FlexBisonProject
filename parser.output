Terminals unused in grammar

    VALID
    BOOL_OP
    EQU
    "lexp"


Grammar

    0 $accept: prog $end

    1 prog: proc progm
    2     | struct prog

    3 progm: %empty
    4      | proc progm
    5      | struct progm

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' stmt '}'

    7 struct: STRUCT ID '{' oneOrMoreDeclarations '}'

    8 zeroOrMoreDeclarations: %empty
    9                       | declaration ',' zeroOrMoreDeclarations

   10 oneOrMoreDeclarations: declaration
   11                      | declaration ',' oneOrMoreDeclarations

   12 declaration: type ID

   13 stmt: %empty
   14     | FOR '(' ID '=' expr ';' expr ';' stmt ')' stmt
   15     | IF '(' expr ')' THEN stmt ELSE stmt
   16     | PRINTF '(' STRINGLITERAL ')' ';'
   17     | RETURN expr ';'
   18     | '{' stmt-seq '}'
   19     | type ID ';'
   20     | ID '=' expr ';'
   21     | ID '.' lexp '=' expr ';'
   22     | ID '(' exprs ')' ';'
   23     | ID '=' ID '(' exprs ')' ';'

   24 exprs: %empty
   25      | expr "," exprs

   26 stmt-seq: %empty
   27         | stmt ',' stmt-seq

   28 type: TYPE
   29     | ID

   30 return-type: TYPE
   31            | VOID

   32 expr: addsub
   33     | '-' expr
   34     | '!' expr

   35 addsub: factor
   36       | expr '+' expr
   37       | expr '-' expr

   38 factor: equality
   39       | expr '*' expr
   40       | expr '/' expr

   41 equality: term
   42         | expr OR expr
   43         | expr MOD expr
   44         | expr AND expr

   45 term: NUMBER
   46     | STRINGLITERAL
   47     | TRUE
   48     | FALSE
   49     | lexp
   50     | '(' expr ')'

   51 lexp: ID
   52     | ID '.' lexp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 34
    '(' (40) 6 14 15 16 22 23 50
    ')' (41) 6 14 15 16 22 23 50
    '*' (42) 39
    '+' (43) 36
    ',' (44) 9 11 27
    '-' (45) 33 37
    '.' (46) 21 52
    '/' (47) 40
    ';' (59) 14 16 17 19 20 21 22 23
    '=' (61) 14 20 21 23
    '{' (123) 6 7 18
    '}' (125) 6 7 18
    error (256)
    NUMBER (258) 45
    VALID (259)
    ID (260) 6 7 12 14 19 20 21 22 23 29 51 52
    STRINGLITERAL (261) 16 46
    FOR (262) 14
    RETURN (263) 17
    TYPE (264) 28 30
    BOOL_OP (265)
    STRUCT (266) 7
    VOID (267) 31
    PRINTF (268) 16
    EQU (269)
    MOD (270) 43
    AND (271) 44
    OR (272) 42
    IF (273) 15
    THEN (274) 15
    ELSE (275) 15
    TRUE (276) 47
    FALSE (277) 48
    "lexp" (278)
    "," (279) 25


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    prog (39)
        on left: 1 2
        on right: 0 2
    progm (40)
        on left: 3 4 5
        on right: 1 4 5
    proc (41)
        on left: 6
        on right: 1 4
    struct (42)
        on left: 7
        on right: 2 5
    zeroOrMoreDeclarations (43)
        on left: 8 9
        on right: 6 9
    oneOrMoreDeclarations (44)
        on left: 10 11
        on right: 7 11
    declaration (45)
        on left: 12
        on right: 9 10 11
    stmt (46)
        on left: 13 14 15 16 17 18 19 20 21 22 23
        on right: 6 14 15 27
    exprs (47)
        on left: 24 25
        on right: 22 23 25
    stmt-seq (48)
        on left: 26 27
        on right: 18 27
    type (49)
        on left: 28 29
        on right: 12 19
    return-type (50)
        on left: 30 31
        on right: 6
    expr (51)
        on left: 32 33 34
        on right: 14 15 17 20 21 25 33 34 36 37 39 40 42 43 44 50
    addsub (52)
        on left: 35 36 37
        on right: 32
    factor (53)
        on left: 38 39 40
        on right: 35
    equality (54)
        on left: 41 42 43 44
        on right: 38
    term (55)
        on left: 45 46 47 48 49 50
        on right: 41
    lexp (56)
        on left: 51 52
        on right: 21 49 52


State 0

    0 $accept: . prog $end

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    prog         go to state 4
    proc         go to state 5
    struct       go to state 6
    return-type  go to state 7


State 1

   30 return-type: TYPE .

    $default  reduce using rule 30 (return-type)


State 2

    7 struct: STRUCT . ID '{' oneOrMoreDeclarations '}'

    ID  shift, and go to state 8


State 3

   31 return-type: VOID .

    $default  reduce using rule 31 (return-type)


State 4

    0 $accept: prog . $end

    $end  shift, and go to state 9


State 5

    1 prog: proc . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 10
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 6

    2 prog: struct . prog

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    prog         go to state 13
    proc         go to state 5
    struct       go to state 6
    return-type  go to state 7


State 7

    6 proc: return-type . ID '(' zeroOrMoreDeclarations ')' '{' stmt '}'

    ID  shift, and go to state 14


State 8

    7 struct: STRUCT ID . '{' oneOrMoreDeclarations '}'

    '{'  shift, and go to state 15


State 9

    0 $accept: prog $end .

    $default  accept


State 10

    1 prog: proc progm .

    $default  reduce using rule 1 (prog)


State 11

    4 progm: proc . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 16
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 12

    5 progm: struct . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 17
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 13

    2 prog: struct prog .

    $default  reduce using rule 2 (prog)


State 14

    6 proc: return-type ID . '(' zeroOrMoreDeclarations ')' '{' stmt '}'

    '('  shift, and go to state 18


State 15

    7 struct: STRUCT ID '{' . oneOrMoreDeclarations '}'

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    oneOrMoreDeclarations  go to state 21
    declaration            go to state 22
    type                   go to state 23


State 16

    4 progm: proc progm .

    $default  reduce using rule 4 (progm)


State 17

    5 progm: struct progm .

    $default  reduce using rule 5 (progm)


State 18

    6 proc: return-type ID '(' . zeroOrMoreDeclarations ')' '{' stmt '}'

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 8 (zeroOrMoreDeclarations)

    zeroOrMoreDeclarations  go to state 24
    declaration             go to state 25
    type                    go to state 23


State 19

   29 type: ID .

    $default  reduce using rule 29 (type)


State 20

   28 type: TYPE .

    $default  reduce using rule 28 (type)


State 21

    7 struct: STRUCT ID '{' oneOrMoreDeclarations . '}'

    '}'  shift, and go to state 26


State 22

   10 oneOrMoreDeclarations: declaration .
   11                      | declaration . ',' oneOrMoreDeclarations

    ','  shift, and go to state 27

    $default  reduce using rule 10 (oneOrMoreDeclarations)


State 23

   12 declaration: type . ID

    ID  shift, and go to state 28


State 24

    6 proc: return-type ID '(' zeroOrMoreDeclarations . ')' '{' stmt '}'

    ')'  shift, and go to state 29


State 25

    9 zeroOrMoreDeclarations: declaration . ',' zeroOrMoreDeclarations

    ','  shift, and go to state 30


State 26

    7 struct: STRUCT ID '{' oneOrMoreDeclarations '}' .

    $default  reduce using rule 7 (struct)


State 27

   11 oneOrMoreDeclarations: declaration ',' . oneOrMoreDeclarations

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    oneOrMoreDeclarations  go to state 31
    declaration            go to state 22
    type                   go to state 23


State 28

   12 declaration: type ID .

    $default  reduce using rule 12 (declaration)


State 29

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' . '{' stmt '}'

    '{'  shift, and go to state 32


State 30

    9 zeroOrMoreDeclarations: declaration ',' . zeroOrMoreDeclarations

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 8 (zeroOrMoreDeclarations)

    zeroOrMoreDeclarations  go to state 33
    declaration             go to state 25
    type                    go to state 23


State 31

   11 oneOrMoreDeclarations: declaration ',' oneOrMoreDeclarations .

    $default  reduce using rule 11 (oneOrMoreDeclarations)


State 32

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' . stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (stmt)

    stmt  go to state 40
    type  go to state 41


State 33

    9 zeroOrMoreDeclarations: declaration ',' zeroOrMoreDeclarations .

    $default  reduce using rule 9 (zeroOrMoreDeclarations)


State 34

   20 stmt: ID . '=' expr ';'
   21     | ID . '.' lexp '=' expr ';'
   22     | ID . '(' exprs ')' ';'
   23     | ID . '=' ID '(' exprs ')' ';'
   29 type: ID .

    '='  shift, and go to state 42
    '.'  shift, and go to state 43
    '('  shift, and go to state 44

    $default  reduce using rule 29 (type)


State 35

   14 stmt: FOR . '(' ID '=' expr ';' expr ';' stmt ')' stmt

    '('  shift, and go to state 45


State 36

   17 stmt: RETURN . expr ';'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 54
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 37

   16 stmt: PRINTF . '(' STRINGLITERAL ')' ';'

    '('  shift, and go to state 60


State 38

   15 stmt: IF . '(' expr ')' THEN stmt ELSE stmt

    '('  shift, and go to state 61


State 39

   18 stmt: '{' . stmt-seq '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    '}'       reduce using rule 26 (stmt-seq)
    $default  reduce using rule 13 (stmt)

    stmt      go to state 62
    stmt-seq  go to state 63
    type      go to state 41


State 40

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' stmt . '}'

    '}'  shift, and go to state 64


State 41

   19 stmt: type . ID ';'

    ID  shift, and go to state 65


State 42

   20 stmt: ID '=' . expr ';'
   23     | ID '=' . ID '(' exprs ')' ';'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 66
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 67
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 43

   21 stmt: ID '.' . lexp '=' expr ';'

    ID  shift, and go to state 47

    lexp  go to state 68


State 44

   22 stmt: ID '(' . exprs ')' ';'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    $default  reduce using rule 24 (exprs)

    exprs     go to state 69
    expr      go to state 70
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 45

   14 stmt: FOR '(' . ID '=' expr ';' expr ';' stmt ')' stmt

    ID  shift, and go to state 71


State 46

   45 term: NUMBER .

    $default  reduce using rule 45 (term)


State 47

   51 lexp: ID .
   52     | ID . '.' lexp

    '.'  shift, and go to state 72

    $default  reduce using rule 51 (lexp)


State 48

   46 term: STRINGLITERAL .

    $default  reduce using rule 46 (term)


State 49

   47 term: TRUE .

    $default  reduce using rule 47 (term)


State 50

   48 term: FALSE .

    $default  reduce using rule 48 (term)


State 51

   34 expr: '!' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 73
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 52

   33 expr: '-' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 74
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 53

   50 term: '(' . expr ')'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 75
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 54

   17 stmt: RETURN expr . ';'
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 83


State 55

   32 expr: addsub .

    $default  reduce using rule 32 (expr)


State 56

   35 addsub: factor .

    $default  reduce using rule 35 (addsub)


State 57

   38 factor: equality .

    $default  reduce using rule 38 (factor)


State 58

   41 equality: term .

    $default  reduce using rule 41 (equality)


State 59

   49 term: lexp .

    $default  reduce using rule 49 (term)


State 60

   16 stmt: PRINTF '(' . STRINGLITERAL ')' ';'

    STRINGLITERAL  shift, and go to state 84


State 61

   15 stmt: IF '(' . expr ')' THEN stmt ELSE stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 85
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 62

   27 stmt-seq: stmt . ',' stmt-seq

    ','  shift, and go to state 86


State 63

   18 stmt: '{' stmt-seq . '}'

    '}'  shift, and go to state 87


State 64

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' stmt '}' .

    $default  reduce using rule 6 (proc)


State 65

   19 stmt: type ID . ';'

    ';'  shift, and go to state 88


State 66

   23 stmt: ID '=' ID . '(' exprs ')' ';'
   51 lexp: ID .
   52     | ID . '.' lexp

    '.'  shift, and go to state 72
    '('  shift, and go to state 89

    $default  reduce using rule 51 (lexp)


State 67

   20 stmt: ID '=' expr . ';'
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 90


State 68

   21 stmt: ID '.' lexp . '=' expr ';'

    '='  shift, and go to state 91


State 69

   22 stmt: ID '(' exprs . ')' ';'

    ')'  shift, and go to state 92


State 70

   25 exprs: expr . "," exprs
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ","  shift, and go to state 93


State 71

   14 stmt: FOR '(' ID . '=' expr ';' expr ';' stmt ')' stmt

    '='  shift, and go to state 94


State 72

   52 lexp: ID '.' . lexp

    ID  shift, and go to state 47

    lexp  go to state 95


State 73

   34 expr: '!' expr .
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 34 (expr)


State 74

   33 expr: '-' expr .
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 33 (expr)


State 75

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr
   50 term: '(' expr . ')'

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ')'  shift, and go to state 96


State 76

   43 equality: expr MOD . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 97
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 77

   44 equality: expr AND . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 98
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 78

   42 equality: expr OR . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 99
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 79

   36 addsub: expr '+' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 100
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 80

   37 addsub: expr '-' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 101
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 81

   39 factor: expr '*' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 102
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 82

   40 factor: expr '/' . expr

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 103
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 83

   17 stmt: RETURN expr ';' .

    $default  reduce using rule 17 (stmt)


State 84

   16 stmt: PRINTF '(' STRINGLITERAL . ')' ';'

    ')'  shift, and go to state 104


State 85

   15 stmt: IF '(' expr . ')' THEN stmt ELSE stmt
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ')'  shift, and go to state 105


State 86

   27 stmt-seq: stmt ',' . stmt-seq

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    '}'       reduce using rule 26 (stmt-seq)
    $default  reduce using rule 13 (stmt)

    stmt      go to state 62
    stmt-seq  go to state 106
    type      go to state 41


State 87

   18 stmt: '{' stmt-seq '}' .

    $default  reduce using rule 18 (stmt)


State 88

   19 stmt: type ID ';' .

    $default  reduce using rule 19 (stmt)


State 89

   23 stmt: ID '=' ID '(' . exprs ')' ';'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    $default  reduce using rule 24 (exprs)

    exprs     go to state 107
    expr      go to state 70
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 90

   20 stmt: ID '=' expr ';' .

    $default  reduce using rule 20 (stmt)


State 91

   21 stmt: ID '.' lexp '=' . expr ';'

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 108
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 92

   22 stmt: ID '(' exprs ')' . ';'

    ';'  shift, and go to state 109


State 93

   25 exprs: expr "," . exprs

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    $default  reduce using rule 24 (exprs)

    exprs     go to state 110
    expr      go to state 70
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 94

   14 stmt: FOR '(' ID '=' . expr ';' expr ';' stmt ')' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 111
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 95

   52 lexp: ID '.' lexp .

    $default  reduce using rule 52 (lexp)


State 96

   50 term: '(' expr ')' .

    $default  reduce using rule 50 (term)


State 97

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   43         | expr MOD expr .
   44         | expr . AND expr

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 43 (equality)


State 98

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr
   44         | expr AND expr .

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 44 (equality)


State 99

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   42         | expr OR expr .
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 42 (equality)


State 100

   36 addsub: expr . '+' expr
   36       | expr '+' expr .
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 36 (addsub)


State 101

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   37       | expr '-' expr .
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82

    $default  reduce using rule 37 (addsub)


State 102

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   39       | expr '*' expr .
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78

    $default  reduce using rule 39 (factor)


State 103

   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   40       | expr '/' expr .
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78

    $default  reduce using rule 40 (factor)


State 104

   16 stmt: PRINTF '(' STRINGLITERAL ')' . ';'

    ';'  shift, and go to state 112


State 105

   15 stmt: IF '(' expr ')' . THEN stmt ELSE stmt

    THEN  shift, and go to state 113


State 106

   27 stmt-seq: stmt ',' stmt-seq .

    $default  reduce using rule 27 (stmt-seq)


State 107

   23 stmt: ID '=' ID '(' exprs . ')' ';'

    ')'  shift, and go to state 114


State 108

   21 stmt: ID '.' lexp '=' expr . ';'
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 115


State 109

   22 stmt: ID '(' exprs ')' ';' .

    $default  reduce using rule 22 (stmt)


State 110

   25 exprs: expr "," exprs .

    $default  reduce using rule 25 (exprs)


State 111

   14 stmt: FOR '(' ID '=' expr . ';' expr ';' stmt ')' stmt
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 116


State 112

   16 stmt: PRINTF '(' STRINGLITERAL ')' ';' .

    $default  reduce using rule 16 (stmt)


State 113

   15 stmt: IF '(' expr ')' THEN . stmt ELSE stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (stmt)

    stmt  go to state 117
    type  go to state 41


State 114

   23 stmt: ID '=' ID '(' exprs ')' . ';'

    ';'  shift, and go to state 118


State 115

   21 stmt: ID '.' lexp '=' expr ';' .

    $default  reduce using rule 21 (stmt)


State 116

   14 stmt: FOR '(' ID '=' expr ';' . expr ';' stmt ')' stmt

    NUMBER         shift, and go to state 46
    ID             shift, and go to state 47
    STRINGLITERAL  shift, and go to state 48
    TRUE           shift, and go to state 49
    FALSE          shift, and go to state 50
    '!'            shift, and go to state 51
    '-'            shift, and go to state 52
    '('            shift, and go to state 53

    expr      go to state 119
    addsub    go to state 55
    factor    go to state 56
    equality  go to state 57
    term      go to state 58
    lexp      go to state 59


State 117

   15 stmt: IF '(' expr ')' THEN stmt . ELSE stmt

    ELSE  shift, and go to state 120


State 118

   23 stmt: ID '=' ID '(' exprs ')' ';' .

    $default  reduce using rule 23 (stmt)


State 119

   14 stmt: FOR '(' ID '=' expr ';' expr . ';' stmt ')' stmt
   36 addsub: expr . '+' expr
   37       | expr . '-' expr
   39 factor: expr . '*' expr
   40       | expr . '/' expr
   42 equality: expr . OR expr
   43         | expr . MOD expr
   44         | expr . AND expr

    MOD  shift, and go to state 76
    AND  shift, and go to state 77
    OR   shift, and go to state 78
    '+'  shift, and go to state 79
    '-'  shift, and go to state 80
    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    ';'  shift, and go to state 121


State 120

   15 stmt: IF '(' expr ')' THEN stmt ELSE . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (stmt)

    stmt  go to state 122
    type  go to state 41


State 121

   14 stmt: FOR '(' ID '=' expr ';' expr ';' . stmt ')' stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (stmt)

    stmt  go to state 123
    type  go to state 41


State 122

   15 stmt: IF '(' expr ')' THEN stmt ELSE stmt .

    $default  reduce using rule 15 (stmt)


State 123

   14 stmt: FOR '(' ID '=' expr ';' expr ';' stmt . ')' stmt

    ')'  shift, and go to state 124


State 124

   14 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' . stmt

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (stmt)

    stmt  go to state 125
    type  go to state 41


State 125

   14 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' stmt .

    $default  reduce using rule 14 (stmt)
