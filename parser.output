Terminals unused in grammar

    VALID
    BOOL_OP
    EQU
    "lexp"


Grammar

    0 $accept: prog $end

    1 prog: proc progm
    2     | struct progm

    3 progm: %empty
    4      | proc progm
    5      | struct progm

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' zeroOrMoreStatements '}'

    7 struct: STRUCT ID '{' oneOrMoreDeclarations '}'

    8 zeroOrMoreDeclarations: %empty
    9                       | declaration
   10                       | declaration ',' zeroOrMoreDeclarations

   11 oneOrMoreDeclarations: declaration
   12                      | declaration ',' oneOrMoreDeclarations

   13 zeroOrMoreStatements: %empty
   14                     | stmt zeroOrMoreStatements

   15 declaration: type ID

   16 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}'
   17     | IF '(' expr ')' THEN '{' stmt '}'
   18     | IF '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt '}'
   19     | PRINTF '(' STRINGLITERAL ')' ';'
   20     | RETURN expr ';'
   21     | '{' stmt-seq '}'
   22     | type ID ';'
   23     | ID '=' expr ';'
   24     | ID '.' lexp '=' expr ';'
   25     | ID '(' exprs ')' ';'
   26     | ID '=' ID '(' exprs ')' ';'

   27 exprs: %empty
   28      | expr "," exprs

   29 stmt-seq: %empty
   30         | stmt ',' stmt-seq

   31 type: TYPE
   32     | ID

   33 return-type: TYPE
   34            | VOID

   35 expr: addsub
   36     | '-' expr
   37     | '!' expr

   38 addsub: factor
   39       | expr '+' expr
   40       | expr '-' expr

   41 factor: equality
   42       | expr '*' expr
   43       | expr '/' expr

   44 equality: term
   45         | expr OR expr
   46         | expr MOD expr
   47         | expr AND expr

   48 term: NUMBER
   49     | STRINGLITERAL
   50     | TRUE
   51     | FALSE
   52     | lexp
   53     | '(' expr ')'

   54 lexp: ID
   55     | ID '.' lexp


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 37
    '(' (40) 6 16 17 18 19 25 26 53
    ')' (41) 6 16 17 18 19 25 26 53
    '*' (42) 42
    '+' (43) 39
    ',' (44) 10 12 30
    '-' (45) 36 40
    '.' (46) 24 55
    '/' (47) 43
    ';' (59) 16 19 20 22 23 24 25 26
    '=' (61) 16 23 24 26
    '{' (123) 6 7 16 17 18 21
    '}' (125) 6 7 16 17 18 21
    error (256)
    NUMBER (258) 48
    VALID (259)
    ID (260) 6 7 15 16 22 23 24 25 26 32 54 55
    STRINGLITERAL (261) 19 49
    FOR (262) 16
    RETURN (263) 20
    TYPE (264) 31 33
    BOOL_OP (265)
    STRUCT (266) 7
    VOID (267) 34
    PRINTF (268) 19
    EQU (269)
    MOD (270) 46
    AND (271) 47
    OR (272) 45
    IF (273) 17 18
    THEN (274) 17 18
    ELSE (275) 18
    TRUE (276) 50
    FALSE (277) 51
    "lexp" (278)
    "," (279) 28


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    prog (39)
        on left: 1 2
        on right: 0
    progm (40)
        on left: 3 4 5
        on right: 1 2 4 5
    proc (41)
        on left: 6
        on right: 1 4
    struct (42)
        on left: 7
        on right: 2 5
    zeroOrMoreDeclarations (43)
        on left: 8 9 10
        on right: 6 10
    oneOrMoreDeclarations (44)
        on left: 11 12
        on right: 7 12
    zeroOrMoreStatements (45)
        on left: 13 14
        on right: 6 14
    declaration (46)
        on left: 15
        on right: 9 10 11 12
    stmt (47)
        on left: 16 17 18 19 20 21 22 23 24 25 26
        on right: 14 16 17 18 30
    exprs (48)
        on left: 27 28
        on right: 25 26 28
    stmt-seq (49)
        on left: 29 30
        on right: 21 30
    type (50)
        on left: 31 32
        on right: 15 22
    return-type (51)
        on left: 33 34
        on right: 6
    expr (52)
        on left: 35 36 37
        on right: 16 17 18 20 23 24 28 36 37 39 40 42 43 45 46 47 53
    addsub (53)
        on left: 38 39 40
        on right: 35
    factor (54)
        on left: 41 42 43
        on right: 38
    equality (55)
        on left: 44 45 46 47
        on right: 41
    term (56)
        on left: 48 49 50 51 52 53
        on right: 44
    lexp (57)
        on left: 54 55
        on right: 24 52 55


State 0

    0 $accept: . prog $end

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    prog         go to state 4
    proc         go to state 5
    struct       go to state 6
    return-type  go to state 7


State 1

   33 return-type: TYPE .

    $default  reduce using rule 33 (return-type)


State 2

    7 struct: STRUCT . ID '{' oneOrMoreDeclarations '}'

    ID  shift, and go to state 8


State 3

   34 return-type: VOID .

    $default  reduce using rule 34 (return-type)


State 4

    0 $accept: prog . $end

    $end  shift, and go to state 9


State 5

    1 prog: proc . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 10
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 6

    2 prog: struct . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 13
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 7

    6 proc: return-type . ID '(' zeroOrMoreDeclarations ')' '{' zeroOrMoreStatements '}'

    ID  shift, and go to state 14


State 8

    7 struct: STRUCT ID . '{' oneOrMoreDeclarations '}'

    '{'  shift, and go to state 15


State 9

    0 $accept: prog $end .

    $default  accept


State 10

    1 prog: proc progm .

    $default  reduce using rule 1 (prog)


State 11

    4 progm: proc . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 16
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 12

    5 progm: struct . progm

    TYPE    shift, and go to state 1
    STRUCT  shift, and go to state 2
    VOID    shift, and go to state 3

    $default  reduce using rule 3 (progm)

    progm        go to state 17
    proc         go to state 11
    struct       go to state 12
    return-type  go to state 7


State 13

    2 prog: struct progm .

    $default  reduce using rule 2 (prog)


State 14

    6 proc: return-type ID . '(' zeroOrMoreDeclarations ')' '{' zeroOrMoreStatements '}'

    '('  shift, and go to state 18


State 15

    7 struct: STRUCT ID '{' . oneOrMoreDeclarations '}'

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    oneOrMoreDeclarations  go to state 21
    declaration            go to state 22
    type                   go to state 23


State 16

    4 progm: proc progm .

    $default  reduce using rule 4 (progm)


State 17

    5 progm: struct progm .

    $default  reduce using rule 5 (progm)


State 18

    6 proc: return-type ID '(' . zeroOrMoreDeclarations ')' '{' zeroOrMoreStatements '}'

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 8 (zeroOrMoreDeclarations)

    zeroOrMoreDeclarations  go to state 24
    declaration             go to state 25
    type                    go to state 23


State 19

   32 type: ID .

    $default  reduce using rule 32 (type)


State 20

   31 type: TYPE .

    $default  reduce using rule 31 (type)


State 21

    7 struct: STRUCT ID '{' oneOrMoreDeclarations . '}'

    '}'  shift, and go to state 26


State 22

   11 oneOrMoreDeclarations: declaration .
   12                      | declaration . ',' oneOrMoreDeclarations

    ','  shift, and go to state 27

    $default  reduce using rule 11 (oneOrMoreDeclarations)


State 23

   15 declaration: type . ID

    ID  shift, and go to state 28


State 24

    6 proc: return-type ID '(' zeroOrMoreDeclarations . ')' '{' zeroOrMoreStatements '}'

    ')'  shift, and go to state 29


State 25

    9 zeroOrMoreDeclarations: declaration .
   10                       | declaration . ',' zeroOrMoreDeclarations

    ','  shift, and go to state 30

    $default  reduce using rule 9 (zeroOrMoreDeclarations)


State 26

    7 struct: STRUCT ID '{' oneOrMoreDeclarations '}' .

    $default  reduce using rule 7 (struct)


State 27

   12 oneOrMoreDeclarations: declaration ',' . oneOrMoreDeclarations

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    oneOrMoreDeclarations  go to state 31
    declaration            go to state 22
    type                   go to state 23


State 28

   15 declaration: type ID .

    $default  reduce using rule 15 (declaration)


State 29

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' . '{' zeroOrMoreStatements '}'

    '{'  shift, and go to state 32


State 30

   10 zeroOrMoreDeclarations: declaration ',' . zeroOrMoreDeclarations

    ID    shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 8 (zeroOrMoreDeclarations)

    zeroOrMoreDeclarations  go to state 33
    declaration             go to state 25
    type                    go to state 23


State 31

   12 oneOrMoreDeclarations: declaration ',' oneOrMoreDeclarations .

    $default  reduce using rule 12 (oneOrMoreDeclarations)


State 32

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' . zeroOrMoreStatements '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (zeroOrMoreStatements)

    zeroOrMoreStatements  go to state 40
    stmt                  go to state 41
    type                  go to state 42


State 33

   10 zeroOrMoreDeclarations: declaration ',' zeroOrMoreDeclarations .

    $default  reduce using rule 10 (zeroOrMoreDeclarations)


State 34

   23 stmt: ID . '=' expr ';'
   24     | ID . '.' lexp '=' expr ';'
   25     | ID . '(' exprs ')' ';'
   26     | ID . '=' ID '(' exprs ')' ';'
   32 type: ID .

    '='  shift, and go to state 43
    '.'  shift, and go to state 44
    '('  shift, and go to state 45

    $default  reduce using rule 32 (type)


State 35

   16 stmt: FOR . '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}'

    '('  shift, and go to state 46


State 36

   20 stmt: RETURN . expr ';'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 55
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 37

   19 stmt: PRINTF . '(' STRINGLITERAL ')' ';'

    '('  shift, and go to state 61


State 38

   17 stmt: IF . '(' expr ')' THEN '{' stmt '}'
   18     | IF . '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt '}'

    '('  shift, and go to state 62


State 39

   21 stmt: '{' . stmt-seq '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 29 (stmt-seq)

    stmt      go to state 63
    stmt-seq  go to state 64
    type      go to state 42


State 40

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' zeroOrMoreStatements . '}'

    '}'  shift, and go to state 65


State 41

   14 zeroOrMoreStatements: stmt . zeroOrMoreStatements

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 13 (zeroOrMoreStatements)

    zeroOrMoreStatements  go to state 66
    stmt                  go to state 41
    type                  go to state 42


State 42

   22 stmt: type . ID ';'

    ID  shift, and go to state 67


State 43

   23 stmt: ID '=' . expr ';'
   26     | ID '=' . ID '(' exprs ')' ';'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 68
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 69
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 44

   24 stmt: ID '.' . lexp '=' expr ';'

    ID  shift, and go to state 48

    lexp  go to state 70


State 45

   25 stmt: ID '(' . exprs ')' ';'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    $default  reduce using rule 27 (exprs)

    exprs     go to state 71
    expr      go to state 72
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 46

   16 stmt: FOR '(' . ID '=' expr ';' expr ';' stmt ')' '{' stmt '}'

    ID  shift, and go to state 73


State 47

   48 term: NUMBER .

    $default  reduce using rule 48 (term)


State 48

   54 lexp: ID .
   55     | ID . '.' lexp

    '.'  shift, and go to state 74

    $default  reduce using rule 54 (lexp)


State 49

   49 term: STRINGLITERAL .

    $default  reduce using rule 49 (term)


State 50

   50 term: TRUE .

    $default  reduce using rule 50 (term)


State 51

   51 term: FALSE .

    $default  reduce using rule 51 (term)


State 52

   37 expr: '!' . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 75
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 53

   36 expr: '-' . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 76
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 54

   53 term: '(' . expr ')'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 77
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 55

   20 stmt: RETURN expr . ';'
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ';'  shift, and go to state 85


State 56

   35 expr: addsub .

    $default  reduce using rule 35 (expr)


State 57

   38 addsub: factor .

    $default  reduce using rule 38 (addsub)


State 58

   41 factor: equality .

    $default  reduce using rule 41 (factor)


State 59

   44 equality: term .

    $default  reduce using rule 44 (equality)


State 60

   52 term: lexp .

    $default  reduce using rule 52 (term)


State 61

   19 stmt: PRINTF '(' . STRINGLITERAL ')' ';'

    STRINGLITERAL  shift, and go to state 86


State 62

   17 stmt: IF '(' . expr ')' THEN '{' stmt '}'
   18     | IF '(' . expr ')' THEN '{' stmt '}' ELSE '{' stmt '}'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 87
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 63

   30 stmt-seq: stmt . ',' stmt-seq

    ','  shift, and go to state 88


State 64

   21 stmt: '{' stmt-seq . '}'

    '}'  shift, and go to state 89


State 65

    6 proc: return-type ID '(' zeroOrMoreDeclarations ')' '{' zeroOrMoreStatements '}' .

    $default  reduce using rule 6 (proc)


State 66

   14 zeroOrMoreStatements: stmt zeroOrMoreStatements .

    $default  reduce using rule 14 (zeroOrMoreStatements)


State 67

   22 stmt: type ID . ';'

    ';'  shift, and go to state 90


State 68

   26 stmt: ID '=' ID . '(' exprs ')' ';'
   54 lexp: ID .
   55     | ID . '.' lexp

    '.'  shift, and go to state 74
    '('  shift, and go to state 91

    $default  reduce using rule 54 (lexp)


State 69

   23 stmt: ID '=' expr . ';'
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ';'  shift, and go to state 92


State 70

   24 stmt: ID '.' lexp . '=' expr ';'

    '='  shift, and go to state 93


State 71

   25 stmt: ID '(' exprs . ')' ';'

    ')'  shift, and go to state 94


State 72

   28 exprs: expr . "," exprs
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ","  shift, and go to state 95


State 73

   16 stmt: FOR '(' ID . '=' expr ';' expr ';' stmt ')' '{' stmt '}'

    '='  shift, and go to state 96


State 74

   55 lexp: ID '.' . lexp

    ID  shift, and go to state 48

    lexp  go to state 97


State 75

   37 expr: '!' expr .
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 37 (expr)


State 76

   36 expr: '-' expr .
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 36 (expr)


State 77

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr
   53 term: '(' expr . ')'

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ')'  shift, and go to state 98


State 78

   46 equality: expr MOD . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 99
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 79

   47 equality: expr AND . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 100
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 80

   45 equality: expr OR . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 101
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 81

   39 addsub: expr '+' . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 102
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 82

   40 addsub: expr '-' . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 103
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 83

   42 factor: expr '*' . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 104
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 84

   43 factor: expr '/' . expr

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 105
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 85

   20 stmt: RETURN expr ';' .

    $default  reduce using rule 20 (stmt)


State 86

   19 stmt: PRINTF '(' STRINGLITERAL . ')' ';'

    ')'  shift, and go to state 106


State 87

   17 stmt: IF '(' expr . ')' THEN '{' stmt '}'
   18     | IF '(' expr . ')' THEN '{' stmt '}' ELSE '{' stmt '}'
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ')'  shift, and go to state 107


State 88

   30 stmt-seq: stmt ',' . stmt-seq

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    $default  reduce using rule 29 (stmt-seq)

    stmt      go to state 63
    stmt-seq  go to state 108
    type      go to state 42


State 89

   21 stmt: '{' stmt-seq '}' .

    $default  reduce using rule 21 (stmt)


State 90

   22 stmt: type ID ';' .

    $default  reduce using rule 22 (stmt)


State 91

   26 stmt: ID '=' ID '(' . exprs ')' ';'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    $default  reduce using rule 27 (exprs)

    exprs     go to state 109
    expr      go to state 72
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 92

   23 stmt: ID '=' expr ';' .

    $default  reduce using rule 23 (stmt)


State 93

   24 stmt: ID '.' lexp '=' . expr ';'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 110
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 94

   25 stmt: ID '(' exprs ')' . ';'

    ';'  shift, and go to state 111


State 95

   28 exprs: expr "," . exprs

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    $default  reduce using rule 27 (exprs)

    exprs     go to state 112
    expr      go to state 72
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 96

   16 stmt: FOR '(' ID '=' . expr ';' expr ';' stmt ')' '{' stmt '}'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 113
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 97

   55 lexp: ID '.' lexp .

    $default  reduce using rule 55 (lexp)


State 98

   53 term: '(' expr ')' .

    $default  reduce using rule 53 (term)


State 99

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   46         | expr MOD expr .
   47         | expr . AND expr

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 46 (equality)


State 100

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr
   47         | expr AND expr .

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 47 (equality)


State 101

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   45         | expr OR expr .
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  error (nonassociative)
    AND  error (nonassociative)
    OR   error (nonassociative)

    $default  reduce using rule 45 (equality)


State 102

   39 addsub: expr . '+' expr
   39       | expr '+' expr .
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 39 (addsub)


State 103

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   40       | expr '-' expr .
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84

    $default  reduce using rule 40 (addsub)


State 104

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   42       | expr '*' expr .
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80

    $default  reduce using rule 42 (factor)


State 105

   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   43       | expr '/' expr .
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80

    $default  reduce using rule 43 (factor)


State 106

   19 stmt: PRINTF '(' STRINGLITERAL ')' . ';'

    ';'  shift, and go to state 114


State 107

   17 stmt: IF '(' expr ')' . THEN '{' stmt '}'
   18     | IF '(' expr ')' . THEN '{' stmt '}' ELSE '{' stmt '}'

    THEN  shift, and go to state 115


State 108

   30 stmt-seq: stmt ',' stmt-seq .

    $default  reduce using rule 30 (stmt-seq)


State 109

   26 stmt: ID '=' ID '(' exprs . ')' ';'

    ')'  shift, and go to state 116


State 110

   24 stmt: ID '.' lexp '=' expr . ';'
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ';'  shift, and go to state 117


State 111

   25 stmt: ID '(' exprs ')' ';' .

    $default  reduce using rule 25 (stmt)


State 112

   28 exprs: expr "," exprs .

    $default  reduce using rule 28 (exprs)


State 113

   16 stmt: FOR '(' ID '=' expr . ';' expr ';' stmt ')' '{' stmt '}'
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ';'  shift, and go to state 118


State 114

   19 stmt: PRINTF '(' STRINGLITERAL ')' ';' .

    $default  reduce using rule 19 (stmt)


State 115

   17 stmt: IF '(' expr ')' THEN . '{' stmt '}'
   18     | IF '(' expr ')' THEN . '{' stmt '}' ELSE '{' stmt '}'

    '{'  shift, and go to state 119


State 116

   26 stmt: ID '=' ID '(' exprs ')' . ';'

    ';'  shift, and go to state 120


State 117

   24 stmt: ID '.' lexp '=' expr ';' .

    $default  reduce using rule 24 (stmt)


State 118

   16 stmt: FOR '(' ID '=' expr ';' . expr ';' stmt ')' '{' stmt '}'

    NUMBER         shift, and go to state 47
    ID             shift, and go to state 48
    STRINGLITERAL  shift, and go to state 49
    TRUE           shift, and go to state 50
    FALSE          shift, and go to state 51
    '!'            shift, and go to state 52
    '-'            shift, and go to state 53
    '('            shift, and go to state 54

    expr      go to state 121
    addsub    go to state 56
    factor    go to state 57
    equality  go to state 58
    term      go to state 59
    lexp      go to state 60


State 119

   17 stmt: IF '(' expr ')' THEN '{' . stmt '}'
   18     | IF '(' expr ')' THEN '{' . stmt '}' ELSE '{' stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    stmt  go to state 122
    type  go to state 42


State 120

   26 stmt: ID '=' ID '(' exprs ')' ';' .

    $default  reduce using rule 26 (stmt)


State 121

   16 stmt: FOR '(' ID '=' expr ';' expr . ';' stmt ')' '{' stmt '}'
   39 addsub: expr . '+' expr
   40       | expr . '-' expr
   42 factor: expr . '*' expr
   43       | expr . '/' expr
   45 equality: expr . OR expr
   46         | expr . MOD expr
   47         | expr . AND expr

    MOD  shift, and go to state 78
    AND  shift, and go to state 79
    OR   shift, and go to state 80
    '+'  shift, and go to state 81
    '-'  shift, and go to state 82
    '*'  shift, and go to state 83
    '/'  shift, and go to state 84
    ';'  shift, and go to state 123


State 122

   17 stmt: IF '(' expr ')' THEN '{' stmt . '}'
   18     | IF '(' expr ')' THEN '{' stmt . '}' ELSE '{' stmt '}'

    '}'  shift, and go to state 124


State 123

   16 stmt: FOR '(' ID '=' expr ';' expr ';' . stmt ')' '{' stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    stmt  go to state 125
    type  go to state 42


State 124

   17 stmt: IF '(' expr ')' THEN '{' stmt '}' .
   18     | IF '(' expr ')' THEN '{' stmt '}' . ELSE '{' stmt '}'

    ELSE  shift, and go to state 126

    $default  reduce using rule 17 (stmt)


State 125

   16 stmt: FOR '(' ID '=' expr ';' expr ';' stmt . ')' '{' stmt '}'

    ')'  shift, and go to state 127


State 126

   18 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE . '{' stmt '}'

    '{'  shift, and go to state 128


State 127

   16 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' . '{' stmt '}'

    '{'  shift, and go to state 129


State 128

   18 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE '{' . stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    stmt  go to state 130
    type  go to state 42


State 129

   16 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' . stmt '}'

    ID      shift, and go to state 34
    FOR     shift, and go to state 35
    RETURN  shift, and go to state 36
    TYPE    shift, and go to state 20
    PRINTF  shift, and go to state 37
    IF      shift, and go to state 38
    '{'     shift, and go to state 39

    stmt  go to state 131
    type  go to state 42


State 130

   18 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt . '}'

    '}'  shift, and go to state 132


State 131

   16 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt . '}'

    '}'  shift, and go to state 133


State 132

   18 stmt: IF '(' expr ')' THEN '{' stmt '}' ELSE '{' stmt '}' .

    $default  reduce using rule 18 (stmt)


State 133

   16 stmt: FOR '(' ID '=' expr ';' expr ';' stmt ')' '{' stmt '}' .

    $default  reduce using rule 16 (stmt)
